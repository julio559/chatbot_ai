<?php

namespace Config;

use CodeIgniter\Config\Filters as BaseFilters;
use CodeIgniter\Filters\Cors;
use CodeIgniter\Filters\CSRF;
use CodeIgniter\Filters\DebugToolbar;
use CodeIgniter\Filters\ForceHTTPS;
use CodeIgniter\Filters\Honeypot;
use CodeIgniter\Filters\InvalidChars;
use CodeIgniter\Filters\PageCache;
use CodeIgniter\Filters\PerformanceMetrics;
use CodeIgniter\Filters\SecureHeaders;

class Filters extends BaseFilters
{
    public array $aliases = [
        'csrf'          => CSRF::class,
        'toolbar'       => DebugToolbar::class,
        'honeypot'      => Honeypot::class,
        'invalidchars'  => InvalidChars::class,
        'secureheaders' => SecureHeaders::class,
        'cors'          => Cors::class,
        'forcehttps'    => ForceHTTPS::class,
        'pagecache'     => PageCache::class,
        'performance'   => PerformanceMetrics::class,

        // filtro de autenticação da sua app (se houver)
        'auth'          => \App\Filters\AuthFilter::class,
    ];

    /**
     * Não force pagecache/https "antes" — isso costuma quebrar dev/local.
     * Deixe o CORS sempre "before" e headers seguros "after".
     */
    public array $required = [
        'before' => [
            // 'forcehttps',   // habilite em produção se tiver HTTPS configurado
        ],
        'after'  => [
            // 'pagecache',   // se usar cache de página, ative aqui com cuidado
            // 'performance',
            // 'toolbar',     // útil em dev
        ],
    ];

    /**
     * Globais:
     *  - CORS antes (evita bloquear preflight OPTIONS)
     *  - CSRF NÃO fica mais aqui: moveremos para $methods (POST/PUT/PATCH/DELETE)
     */
    public array $globals = [
        'before' => [
            'cors',
            // Se quiser, pode manter honeypot/invchars aqui:
            // 'honeypot',
            // 'invalidchars',
        ],
        'after' => [
            'secureheaders',
            // 'toolbar',
        ],
    ];

    /**
     * Aplique CSRF **somente** em métodos que modificam estado.
     * Isso evita 403 em GET/OPTIONS e libera suas rotas de listagem/busca.
     */
    public array $methods = [
        'post'   => ['csrf'],
        'put'    => ['csrf'],
        'patch'  => ['csrf'],
        'delete' => ['csrf'],
    ];

    /**
     * Filtros por rota. Aqui você pode:
     *  - Exigir auth em grupos de rotas
     *  - Adicionar exceções de CSRF para webhooks/external callbacks
     */
    public array $filters = [
        // Exigir auth (exemplo):
        // 'auth' => ['before' => ['dashboard*','paciente*','kanban*','chat*','etapas*','notificacoes*','agendamentos*','whatsapp*']],

        // Exceções de CSRF por rota (só onde precisar mesmo):
        'csrf' => [
            'before' => [
                // Webhooks (sem CSRF, usam x-api-key, etc.)
                'webhook',
                'webhook/*',
                'webhook-sessao/receive',
                'webhook-sessao/*',

                // Gateway WhatsApp
                'whatsapp/gw',
                'whatsapp/bind',
                'whatsapp/reset/*',
                'whatsapp/status/*',
                'whatsapp/qr/*',
                'whatsapp/set-webhook/*',
                'whatsapp/delete/*',

                // Se você NÃO enviar CSRF nesses forms especificos:
                'paciente/atualizar',
                'paciente/atualizar/*',
                'paciente/excluir',
                'paciente/excluir/*',
            ],
        ],
    ];
}
